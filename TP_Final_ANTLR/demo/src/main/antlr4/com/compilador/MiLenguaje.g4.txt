grammar MiLenguaje;

// Reglas del parser (no terminales)
prog        : stmt+ ;

stmt
    : ifStmt
    | loopStmt
    | asignacion
    | declFunc
    | llamadaFunc
    | 'break' ';'
    | 'continue' ';'
    | 'return' expr? ';'
    ;

ifStmt
    : 'if' '(' condicion ')' stmt ('else' stmt)?
    ;

loopStmt
    : 'for' '(' asignacion expr ';' asignacion ')' stmt
    | 'while' '(' condicion ')' stmt
    ;

asignacion
    : ID '=' expr ';'
    ;

condicion
    : expr relop expr
    | 'true'
    | 'false'
    ;

expr
    : expr ('+'|'-') term
    | term
    ;

term
    : term ('*'|'/') factor
    | factor
    ;

factor
    : ID
    | NUM
    | CHAR
    | '(' expr ')'
    ;

declFunc
    : tipo ID '(' parametros? ')' bloque
    ;

parametros
    : parametro (',' parametro)*
    ;

parametro
    : tipo ID
    ;

llamadaFunc
    : ID '(' argumentos? ')' ';'
    ;

argumentos
    : expr (',' expr)*
    ;

bloque
    : '{' stmt* '}'
    ;

// Reglas l√©xicas (terminales)
tipo
    : 'int'
    | 'char'
    | 'double'
    | 'void'
    ;

relop
    : '=='
    | '!='
    | '<'
    | '>'
    | '<='
    | '>='
    ;

ID      : [a-zA-Z_][a-zA-Z0-9_]* ;
NUM     : [0-9]+ ('.' [0-9]+)? ;
CHAR    : '\'' . '\'' ;

WS      : [ \t\r\n]+ -> skip ;
COMENT  : '//' ~[\r\n]* -> skip ;
