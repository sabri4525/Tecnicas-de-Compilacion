# -*- coding: utf-8 -*-
"""TC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2WMnXy6Lj3fGjLvZYBwQyXQLO8hRksR
"""



"""# ejercicios lexicos - ejercicio 3"""

import re

# Definir patrones para diferentes tipos de tokens
TOKEN_PATTERNS = [
    ('KEYWORD', r'\b(if|else|while|return|int|float|char)\b'),  # Palabras clave
    ('IDENTIFIER', r'\b[A-Za-z_][A-Za-z0-9_]*\b'),             # Identificadores
    ('NUMBER', r'\b\d+(\.\d+)?\b'),                            # Números
    ('OPERATOR', r'[+\-*/=<>!&|]'),                            # Operadores
    ('DELIMITER', r'[(),;{}]'),                                # Delimitadores
    ('STRING', r'".*?"'),                                      # Cadenas de texto
    ('WHITESPACE', r'\s+'),                                    # Espacios en blanco
    ('UNKNOWN', r'.')                                          # Token desconocido
]

def analyze_code(source_code):
    tokens = []
    lines = source_code.split('\n')  # Dividir por líneas
    for line_number, line in enumerate(lines, start=1):
        column = 1
        while line:
            match = None
            for token_type, pattern in TOKEN_PATTERNS:
                regex = re.compile(pattern)
                match = regex.match(line)
                if match:
                    value = match.group(0)
                    if token_type != 'WHITESPACE':  # Ignorar espacios en blanco
                        tokens.append({
                            'Token': value,
                            'Tipo': token_type,
                            'Línea': line_number,
                            'Columna': column
                        })
                    line = line[len(value):]
                    column += len(value)
                    break
            if not match:
                break
    return tokens

# Código de ejemplo para analizar
codigo_fuente = """int suma(int a, int b) {
    return a + b;
}
"""

# Analizar el código fuente
resultado = analyze_code(codigo_fuente)

# Mostrar los resultados en formato de tabla
print(f"{'Token':<15} {'Tipo':<15} {'Línea':<10} {'Columna':<10}")
for token in resultado:
    print(f"{token['Token']:<15} {token['Tipo']:<15} {token['Línea']:<10} {token['Columna']:<10}")